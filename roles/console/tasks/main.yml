---
- name: install eucaconsole package
  yum:
    name:
      - eucaconsole
      - eucaconsole-selinux
    state: present
  tags:
    - image
    - packages

- name: remove conflicting webob package
  shell:
    cmd: rpm -e --nodeps python-webob
    warn: false
  register: shell_result
  changed_when: "shell_result is succeeded"
  failed_when: "shell_result is failed and 'is not installed' not in shell_result.stderr"
  tags:
    - image
    - packages

- name: eucaconsole ufshost configuration
  replace:
    path: /etc/eucaconsole/console.ini
    regexp: '^ufshost = .+$'
    replace: 'ufshost = {{ cloud_system_dns_dnsdomain }}'

- name: eucaconsole aws login configuration
  replace:
    path: /etc/eucaconsole/console.ini
    regexp: '^aws.enabled = .+$'
    replace: 'aws.enabled = false'

- name: eucaconsole nginx listener interface configuration
  replace:
    path: /etc/eucaconsole/nginx.conf
    regexp: '^(\s+)listen (\d+) (ssl|default);$'
    replace: '\1listen {{ eucalyptus_host_public_ipv4 }}:\2 \3;'

- name: eucaconsole init script nginx daemon configuration
  replace:
    path: /etc/rc.d/init.d/eucaconsole
    regexp: '^(\s+)daemon /usr/sbin/nginx(.+)$'
    replace: '\1daemon --pidfile ${NGINXPIDFILE} /usr/sbin/nginx\2'

- import_tasks: ats.yml
  when: eucaconsole_product == "ats"

- name: eucaconsole firewalld http services for public zone
  firewalld:
    zone: "{{ cloud_firewalld_public_zone }}"
    service: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: "{{ cloud_firewalld_start }}"
  tags:
    - firewalld
  when: cloud_firewalld_configure and eucaconsole_firewalld_configure and cloud_firewalld_public_zone is not none
  with_items:
  - http
  - https

- name: start eucaconsole service
  systemd:
    enabled: true
    state: started
    name: eucaconsole

- name: configure eucalyptus/admin password
  shell: |
    set -eu
    eval $(clcadmin-assume-system-credentials)
    CONSOLE_PASSWORD={{ eucaconsole_admin_password | quote }}
    euare-useraddloginprofile -u admin -p "${CONSOLE_PASSWORD}"
  delegate_to: "{{ groups.cloud[0] }}"
  register: shell_result
  when: eucaconsole_admin_password|length >= 8
  changed_when: '"EntityAlreadyExists" not in shell_result.stderr'
  failed_when:
    - shell_result.rc != 0
    - '"EntityAlreadyExists" not in shell_result.stderr'
